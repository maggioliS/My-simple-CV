{"version":3,"file":"people.service.js","sourceRoot":"","sources":["../../src/services/people.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Biim } from '@hapiness/biim';\nimport { Injectable } from '@hapiness/core';\n\nimport { from, Observable, of, throwError } from 'rxjs';\nimport { find, findIndex, flatMap, map, tap } from 'rxjs/operators';\nimport { Person } from '../interfaces';\nimport { PEOPLE } from './people';\n\n@Injectable()\nexport class PeopleService {\n    // private property to store all people\n    private _people: Person[];\n\n    /**\n     * Class constructor\n     */\n    constructor() {\n        this._people = PEOPLE.map(person => Object.assign(person, {\n            birthDate: this._parseDate(person.birthDate)\n        }));\n    }\n\n    /**\n     * Returns all existing people in the list\n     *\n     * @returns {Observable<Person[] | void>}\n     */\n    listAll(): Observable<Person[] | void> {\n        return of(this._people)\n            .pipe(\n                map(_ => (!!_ && !!_.length) ? _ : undefined)\n            );\n    }\n\n    /**\n     * Returns randomly one people of the list\n     *\n     * @returns {Observable<Person | void>}\n     */\n    random(): Observable<Person | void> {\n        return of(this._people[ Math.round(Math.random() * this._people.length) ])\n            .pipe(\n                map(_ => !!_ ? _ : undefined)\n            );\n    }\n\n    /**\n     * Returns one people of the list matching id in parameter\n     *\n     * @param {string} id of the people\n     *\n     * @returns {Observable<Person>}\n     */\n    one(id: string): Observable<Person> {\n        return from(this._people)\n            .pipe(\n                find(_ => _.id === id),\n                flatMap(_ =>\n                    !!_ ?\n                        of(_) :\n                        throwError(Biim.notFound(`People with id '${id}' not found`))\n                )\n            );\n    }\n\n    /**\n     * Check if person already exists and add it in people list\n     *\n     * @param person to create\n     *\n     * @returns {Observable<any>}\n     */\n    create(person: Person): Observable<any> {\n        return from(this._people)\n            .pipe(\n                find(_ => _.lastname.toLowerCase() === person.lastname.toLowerCase() &&\n                    _.firstname.toLowerCase() === person.firstname.toLowerCase()),\n                flatMap(_ =>\n                    !!_ ?\n                        throwError(\n                            Biim.conflict(`People with lastname '${person.lastname}' and firstname '${person.firstname}' already exists`)\n                        ) :\n                        this._addPerson(person)\n                ),\n                map(_ => ({ response: _, statusCode: 201 }))\n            );\n    }\n\n    /**\n     * Update a person in people list\n     *\n     * @param {string} id of the person to update\n     * @param person data to update\n     *\n     * @returns {Observable<any>}\n     */\n    update(id: string, person: Person): Observable<Person> {\n        return this._findPeopleIndexOfList(id)\n            .pipe(\n                tap(_ => Object.assign(this._people[ _ ], person)),\n                map(_ => this._people[ _ ])\n            );\n    }\n\n    /**\n     * Deletes one person in people list\n     *\n     * @param {string} id of the person to delete\n     *\n     * @returns {Observable<void>}\n     */\n    delete(id: string): Observable<void> {\n        return this._findPeopleIndexOfList(id)\n            .pipe(\n                tap(_ => this._people.splice(_, 1)),\n                map(() => undefined)\n            );\n    }\n\n    /**\n     * Finds index of array for current person\n     *\n     * @param {string} id of the person to find\n     *\n     * @returns {Observable<number>}\n     *\n     * @private\n     */\n    private _findPeopleIndexOfList(id: string): Observable<number> {\n        return from(this._people)\n            .pipe(\n                findIndex(_ => _.id === id),\n                flatMap(_ => _ > -1 ?\n                    of(_) :\n                    throwError(Biim.notFound(`People with id '${id}' not found`))\n                )\n            );\n    }\n\n    /**\n     * Add person with good data in people list\n     *\n     * @param person to add\n     *\n     * @returns {Observable<any>}\n     *\n     * @private\n     */\n    private _addPerson(person: Person): Observable<any> {\n        return of(person)\n            .pipe(\n                map(_ =>\n                    Object.assign(_, {\n                        id: this._createId(),\n                        birthDate: this._parseDate('20/10/1990')\n                    })\n                ),\n                tap(_ => this._people = this._people.concat(_))\n            );\n    }\n\n    /**\n     * Function to parse date and return timestamp\n     *\n     * @param {string} date to parse\n     *\n     * @returns {number} timestamp\n     *\n     * @private\n     */\n    private _parseDate(date: string): number {\n        const dates = date.split('/');\n        return (new Date(dates[ 2 ] + '/' + dates[ 1 ] + '/' + dates[ 0 ]).getTime());\n    }\n\n    /**\n     * Creates a new id\n     *\n     * @returns {string}\n     *\n     * @private\n     */\n    private _createId(): string {\n        return `${new Date().getTime()}`\n    }\n}\n"]}